var search_data = {"index":{"searchIndex":["net","http","sharefile","sharefileservice","sharefolder","shareuser","create()","create()","delete()","delete()","delete()","deletef()","download()","fetch_children()","get()","get()","get()","getacl()","getex()","getex()","getex()","getlink()","grandparent()","grandparent()","grant()","list()","listc()","liste()","listex()","new()","new()","new()","new()","original_use_ssl=()","parent()","parent()","rename()","rename()","request_url()","resetp()","revoke()","search()","update()","upload()","use_ssl=()"],"longSearchIndex":["net","net::http","sharefile","sharefileservice","sharefolder","shareuser","sharefolder#create()","shareuser#create()","sharefile#delete()","sharefolder#delete()","shareuser#delete()","shareuser#deletef()","sharefile#download()","sharefolder#fetch_children()","sharefile#get()","sharefolder#get()","shareuser#get()","sharefolder#getacl()","sharefile#getex()","sharefolder#getex()","shareuser#getex()","sharefile#getlink()","sharefile#grandparent()","sharefolder#grandparent()","sharefolder#grant()","sharefolder#list()","shareuser#listc()","shareuser#liste()","sharefolder#listex()","sharefile::new()","sharefileservice::new()","sharefolder::new()","shareuser::new()","net::http#original_use_ssl=()","sharefile#parent()","sharefolder#parent()","sharefile#rename()","sharefolder#rename()","sharefolder#request_url()","shareuser#resetp()","sharefolder#revoke()","sharefileservice#search()","shareuser#update()","sharefile#upload()","net::http#use_ssl=()"],"info":[["Net","","Net.html","","<p>using local certs to make SSL work\n"],["Net::HTTP","","Net/HTTP.html","",""],["ShareFile","","ShareFile.html","",""],["ShareFileService","","ShareFileService.html","","<p>This is how you make the initial connection to sharefile API.\n<p><code>connection</code> = <code>ShareFileService</code>.<code>new</code>(\"\n...\n"],["ShareFolder","","ShareFolder.html","",""],["ShareUser","","ShareUser.html","",""],["create","ShareFolder","ShareFolder.html#method-i-create","(name)","<p>Passing the required \"name\" parameter creates a folder with this name.\nOptionally, passing ...\n"],["create","ShareUser","ShareUser.html#method-i-create","(firstname, lastname, email, isemployee=false, company=nil, createfolders=false, usefilebox=false, manageusers=false, isadmin=false, password=nil)","<p>(not implemented) Passing in the required parameters, a user is created in\nthe system as either a client ...\n"],["delete","ShareFile","ShareFile.html#method-i-delete","()","<p>Removes a file from the system. Files can be recovered within 7 days, but\nnot currently through the  ...\n"],["delete","ShareFolder","ShareFolder.html#method-i-delete","()","<p>Deletes a folder given the passed in \"id\" parameter and all children of\nthis folder.\n"],["delete","ShareUser","ShareUser.html#method-i-delete","()","<p>Calling this will delete the user completely from the system. Note: This\noperation may take several minutes ...\n"],["deletef","ShareUser","ShareUser.html#method-i-deletef","()","<p>Calling this will delete the user from all folders ONLY but not the system.\nNote: This operation may ...\n"],["download","ShareFile","ShareFile.html#method-i-download","()","<p>Returns a direct link to download the file.\n"],["fetch_children","ShareFolder","ShareFolder.html#method-i-fetch_children","()","<p>populates ShareFolder.children list. Can be done at initialize using\ninclude_children=true\n"],["get","ShareFile","ShareFile.html#method-i-get","()","<p>Returns all metadata of the requested file id.\n"],["get","ShareFolder","ShareFolder.html#method-i-get","()","<p>Returns id of the current folder verifying it exists\n"],["get","ShareUser","ShareUser.html#method-i-get","()","<p>Returns the user metadata.\n"],["getacl","ShareFolder","ShareFolder.html#method-i-getacl","()","<p>Returns a permission list for the given folder.\n"],["getex","ShareFile","ShareFile.html#method-i-getex","()","<p>Returns additional data for the requested file.\n"],["getex","ShareFolder","ShareFolder.html#method-i-getex","()","<p>Returns all metadata of the requested folder id\n"],["getex","ShareUser","ShareUser.html#method-i-getex","()","<p>Returns additional information about the user.\n"],["getlink","ShareFile","ShareFile.html#method-i-getlink","(requireuserinfo=false,expirationdays=30,notifyondownload=false, maxdownloads=-1)","<p>(not implemented) Generates a public link for download.\n"],["grandparent","ShareFile","ShareFile.html#method-i-grandparent","()","<p>Returns a ShareFolder object that is the grandparent of self\n"],["grandparent","ShareFolder","ShareFolder.html#method-i-grandparent","()","<p>Returns a ShareFolder object that is the grandparent of self\n"],["grant","ShareFolder","ShareFolder.html#method-i-grant","(userid=nil, email=nil, download=true, upload=false, view=true, admin=false, delete=false, notifyupload=false, notifydownload=false)","<p>(not implemented) Grants folder privileges to the given user.\n"],["list","ShareFolder","ShareFolder.html#method-i-list","()","<p>Returns a list of all sub-folders and files in the current folder\n"],["listc","ShareUser","ShareUser.html#method-i-listc","()","<p>Returns a list of all the account clients.\n"],["liste","ShareUser","ShareUser.html#method-i-liste","()","<p>Returns a list of all the account employees.\n"],["listex","ShareFolder","ShareFolder.html#method-i-listex","()","<p>Returns a list of all sub-folders and files in the current folder with\nadditional information.\n"],["new","ShareFile","ShareFile.html#method-c-new","(id, authid, subdomain, item=nil)",""],["new","ShareFileService","ShareFileService.html#method-c-new","(subdomain,email,password)",""],["new","ShareFolder","ShareFolder.html#method-c-new","(id, authid, subdomain, item=nil, include_children=false)",""],["new","ShareUser","ShareUser.html#method-c-new","(id, authid, subdomain)",""],["original_use_ssl=","Net::HTTP","Net/HTTP.html#method-i-original_use_ssl-3D","(flag)",""],["parent","ShareFile","ShareFile.html#method-i-parent","()","<p>Returns a ShareFolder object that is the parent of self\n"],["parent","ShareFolder","ShareFolder.html#method-i-parent","()","<p>Returns a ShareFolder object that is the parent of self\n"],["rename","ShareFile","ShareFile.html#method-i-rename","(name)","<p>Passing the required \"name\" parameter will change a files name to what is\npassed.\n"],["rename","ShareFolder","ShareFolder.html#method-i-rename","(name)","<p>Passing the required \"name\" parameter will change a folders name to what is\npassed.\n"],["request_url","ShareFolder","ShareFolder.html#method-i-request_url","(requirelogin=false, requireuserinfo=false, expirationdays=30, notifyonupload=false)","<p>(not implemented) Calling this function will return a link directly to a\nspecified folder given the \"id\" ...\n"],["resetp","ShareUser","ShareUser.html#method-i-resetp","(oldp,newp,notify=false)","<p>(not implemented) Calling this will reset the specified users password.\n"],["revoke","ShareFolder","ShareFolder.html#method-i-revoke","(userid=nil, email=nil)","<p>(not implemented) Revokes folder privileges from the given user\n"],["search","ShareFileService","ShareFileService.html#method-i-search","(q)","<p>Returns a list of ShareFolder and ShareFile objects.\n"],["update","ShareUser","ShareUser.html#method-i-update","(firstname, lastname, email=nil)","<p>(not implemented) Passing in the required parameters, a user is updated in\nthe system. Other specific ...\n"],["upload","ShareFile","ShareFile.html#method-i-upload","(filename, folderid=nil, unzip=true, overwrite=false, details=nil)","<p>(not implemented) Passing the required parameters will create the file in\nthe specified folder AFTER ...\n"],["use_ssl=","Net::HTTP","Net/HTTP.html#method-i-use_ssl-3D","(flag)",""]]}}